include ../../py/mkenv.mk

CROSS = 1

# MicroPython feature configurations
MICROPY_ROM_TEXT_COMPRESSION ?= 1

# include py core make definitions
include $(TOP)/py/py.mk

ifeq ($(CROSS), 1)
#CROSS_COMPILE ?= arm-none-eabi-
CROSS_COMPILE ?= x86_64-linux-gnu-
endif

INC += -I.
INC += -I$(TOP)
INC += -I$(BUILD)

ifeq ($(CROSS), 1)
DFU = $(TOP)/tools/dfu.py
PYDFU = $(TOP)/tools/pydfu.py
#CFLAGS_CORTEX_M4 = -mthumb -mtune=cortex-m4 -mcpu=cortex-m4 -msoft-float -fsingle-precision-constant -Wdouble-promotion -Wfloat-conversion
#CFLAGS = $(INC) -Wall -Werror -std=c99 -nostdlib $(CFLAGS_CORTEX_M4) $(COPT)
#CFLAGS = -elf32_x86_64 $(INC) -Wall -Werror -std=c99 -nostdlib $(COPT)
#CFLAGS = -elf_i386 $(INC) -Wall -Werror -std=c99 -nostdlib $(COPT)
CFLAGS = -m32 $(INC) -Wall -Werror -std=c99 -nostdlib $(COPT)

#LDFLAGS = -elf32_x86_64 -nostdlib -T stm32f405.ld  -Map=$@.map --cref --gc-sections

#LDFLAGS = -m elf_i386 -nostdlib -T stm32f405.ld  -Map=$@.map --cref --gc-sections
LDFLAGS = -m elf_i386 -nostdlib -Map=$@.map --cref --gc-sections -e 0x100000


else
#LD = x86-linux-gnu-ld
#CFLAGS = -m32 $(INC) -Wall -Werror -Wdouble-promotion -Wfloat-conversion -std=c99 $(COPT)
CFLAGS = -elf_i386 $(INC) -Wall -Werror -Wdouble-promotion -Wfloat-conversion -std=c99 $(COPT)

LDFLAGS = -m elf_i386 -Wl,-Map=$@.map,--cref -Wl,--gc-sections -e 0x100000
endif

CSUPEROPT = -Os # save some code space

# Tune for Debugging or Optimization
ifeq ($(DEBUG), 1)
CFLAGS += -O0 -ggdb
else
CFLAGS += -Os -DNDEBUG
CFLAGS += -fdata-sections -ffunction-sections
endif

LIBS =

SRC_C = \
	main.c \
	gccollect.c \
	lib/utils/printf.c \
	lib/utils/stdout_helpers.c \
	lib/utils/pyexec.c \
	lib/mp-readline/readline.c \

#	$(BUILD)/_frozen_mpy.c \
#	mphalport.h \
#	mpconfigport.h \
#	string.c \
#	mphalport.c \
#	modutime.c \
#	modpyb.c \
#	nlr.c \
#	Ia32\nlrsetjmp.nasm \

#ifeq ($(CROSS), 1)
SRC_C += lib/libc/string0.c
#endif

OBJ = $(PY_CORE_O) $(addprefix $(BUILD)/, $(SRC_C:.c=.o))

ifeq ($(CROSS), 1)
all: $(BUILD)/firmware.dfu
else
all: $(BUILD)/firmware.elf
endif

$(BUILD)/_frozen_mpy.c: frozentest.mpy $(BUILD)/genhdr/qstrdefs.generated.h
	$(ECHO) "MISC freezing bytecode"
	$(Q)$(TOP)/tools/mpy-tool.py -f -q $(BUILD)/genhdr/qstrdefs.preprocessed.h -mlongint-impl=none $< > $@

$(BUILD)/firmware.elf: $(OBJ)
	#$(ECHO) "LINK $@"
	#$(Q)$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
	$(ECHO) "LINK $@"
	$(Q)$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
	$(Q)$(SIZE) $@

$(BUILD)/firmware.bin: $(BUILD)/firmware.elf
	$(Q)$(OBJCOPY) -O binary -j .isr_vector -j .text -j .data $^ $(BUILD)/firmware.bin

$(BUILD)/firmware.dfu: $(BUILD)/firmware.bin
	$(ECHO) "Create $@"
	$(Q)$(PYTHON) $(DFU) -b 0x08000000:$(BUILD)/firmware.bin $@

deploy: $(BUILD)/firmware.dfu
	$(ECHO) "Writing $< to the board"
	$(Q)$(PYTHON) $(PYDFU) -u $<

# Run emulation build on a POSIX system with suitable terminal settings
run:
	stty raw opost -echo
	build/firmware.elf
	@echo Resetting terminal...
# This sleep is useful to spot segfaults
	sleep 1
	reset

test: $(BUILD)/firmware.elf
	$(Q)/bin/echo -e "print('hello world!', list(x+1 for x in range(10)), end='eol\\\\n')\\r\\n\\x04" | $(BUILD)/firmware.elf | tail -n2 | grep "^hello world! \\[1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\]eol"

include $(TOP)/py/mkrules.mk
